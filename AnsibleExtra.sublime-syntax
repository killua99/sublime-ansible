%YAML 1.2
---
name: Ansible Extra
scope: source.ansible-extra
version: 2

variables:

  operatos: |-
    (?x:
      \b(?:
          (is|or)(\snot)?|if|else|(un)?defined
      )+\b
    )

  builtin_functions: |-
    (?x:
      \b(?:
          d(efault)?|query|lookup
          |combine|selectattr|dict2items
          |product|list|query|lower|regex_replace
      )\b
    )

  builtin_tags: |-
    (?x:
      \b(?:
          block|recursive|macro
          |call|filter|set|extends|include|raw|debug|with
          |autoescape|trans|pluralize|scoped|as|do
      )\b
    )

contexts:

  main:
    - match: ""
      push: Packages/Ansible/Ansible.sublime-syntax
      with_prototype:
        - include: jinja
        - include: when_control

  when_control:
    - include: when_multiline
    - include: when_inline

  constant_ansible:
    - match: 'ansible_((?:\.)?\w+(\[\w\]+)?)+'
      scope: constant.language.ansible-extra

  when_inline:
    - match: '^\s*(when)(:)(?=\s)'
      captures:
        1: meta.mapping.ansible-extra entity.name.tag.ansible-extra
        2: punctuation.separator.key-value.mapping.ansible-extra
      push:
        - clear_scopes: true
        - match: \n
          pop: true
        - match: ((?!\B('|")[^'"]*){{operatos}}(?![^'"]*('|")\B))
          scope: keyword.operator.word.ansible-extra
        - match: \B(\||==|!=)\B
          scope: keyword.operator.ansible-extra
        - include: constant_ansible

  when_multiline:
    - match: '^\s*(when)(:)$'
      captures:
        1: meta.mapping.ansible-extra entity.name.tag.ansible-extra
        2: punctuation.separator.key-value.mapping.ansible-extra
      push:
        - clear_scopes: true
        - match: ^(?!\1 +\S|\s*$)
          pop: true
        - match: ((?!\B('|")[^'"]*){{operatos}}(?![^'"]*('|")\B))
          scope: keyword.operator.word.ansible
        - match: \B(\||==|!=)\B
          scope: keyword.operator.ansible-extra
        - match: \bis\b
          scope: keyword.operator.ansible-extra
        - include: constant_ansible


  jinja:
    - match: \{{2}
      scope: punctuation.section.interpolation.begin.ansible-extra
      push:
        - clear_scopes: true
        - meta_scope: meta.interpolation.ansible-extra
        - meta_content_scope: text.embedded.ansible-extra
        - match: \}{2}
          scope:  punctuation.section.interpolation.end.ansible-extra
          pop: true
        - include: jinja_body

  jinja_body:
    - include: match_keywords
    - include: constant_ansible
    - include: single_functions
    - include: jinja_functions
    - include: jinja_storage

  match_keywords:
    - match: \b(for)\b
      scope: keyword.control.loop.for.ansible-extra
    - match: \b(if)\b
      scope: keyword.control.conditional.if.ansible-extra
    - match: \b(else)\b
      scope: keyword.control.conditional.else.ansible-extra
    - match: \b(elif)\b
      scope: keyword.control.conditional.elseif.ansible-extra
    - match: \b(continue)\b
      scope: keyword.control.flow.continue.ansible-extra
    - match: \b(break)\b
      scope: keyword.control.flow.break.ansible-extra
    - match: '{{builtin_tags}}'
      scope: keyword.other.tag.ansible-extra
    - match: (\||==|!=)
      scope: keyword.other.tag.ansible-extra

  single_functions:
    - match: \s{{builtin_functions}}\s
      scope: support.function.global.ansible-extra

  jinja_storage:
    - match: \s\w+\s
      scope: storage.type.global.ansible-extra

  jinja_functions:
    - match: (?:({{builtin_functions}})|(\w))(\()
      captures:
        1: support.function.global.ansible-extra
        2: variable.function.ansible-extra
        3: punctuation.section.arguments.begin.ansible-extra
      push:
        - meta_content_scope: meta.function-call.arguments.ansible-extra
        - match: \)
          scope: punctuation.section.arguments.end.ansible-extra
          pop: true
        - match: '[a-zA-Z0-9_]+'
          scope: variable.parameter.ansible-extra
        - match: \,
          scope: punctuation.separator.parameters.ansible-extra
